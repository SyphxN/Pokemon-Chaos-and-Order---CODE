/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PokemonChaosandOrder;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;

/**
 *
 * @author SyphiN
 */
public class BattleGUI extends javax.swing.JFrame {

    /**
     * Creates new form BattleGUI
     */
    public BattleGUI() {
        initComponents();
        battleScreen.setVisible(true);
        pokemonScreen.setVisible(false);
        Pokemon1.setText(userPokemon[0].getName());
        Pokemon2.setText(userPokemon[1].getName());
        Pokemon3.setText(userPokemon[2].getName());
        Pokemon4.setText(userPokemon[3].getName());
        Pokemon5.setText(userPokemon[4].getName());
        Pokemon6.setText(userPokemon[5].getName());
        changePokemon(userPokemonImage,userPokemon[uPKMNNum]);
        changePokemon(enemyPokemonImage,enemyPokemon[ePKMNNum]);
    }
    public static Pokemon userPokemon[];
    public static Pokemon enemyPokemon[];
    public static Pokemon activePokemon;
    public static Pokemon activeEnemyPokemon;
    public static int ePKMNNum = 0;
    public static int uPKMNNum = 0;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pokemonSelector = new javax.swing.ButtonGroup();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        battleScreen = new javax.swing.JPanel();
        buttonD = new javax.swing.JButton();
        buttonB = new javax.swing.JButton();
        buttonA = new javax.swing.JButton();
        buttonC = new javax.swing.JButton();
        enemyInfo = new javax.swing.JLabel();
        yourInfo = new javax.swing.JLabel();
        userPokemonImage = new javax.swing.JLabel();
        enemyPokemonImage = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultLabel = new javax.swing.JTextPane();
        pokemonScreen = new javax.swing.JPanel();
        selectPokemon = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultLabel1 = new javax.swing.JTextPane();
        Pokemon2 = new javax.swing.JRadioButton();
        Pokemon3 = new javax.swing.JRadioButton();
        Pokemon4 = new javax.swing.JRadioButton();
        Pokemon5 = new javax.swing.JRadioButton();
        Pokemon6 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        Pokemon1 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pokemon Chaos and Order");
        setBackground(new java.awt.Color(255, 255, 153));

        battleScreen.setBackground(new java.awt.Color(0, 153, 153));

        buttonD.setBackground(new java.awt.Color(255, 0, 0));
        buttonD.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        buttonD.setText("Run");
        buttonD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDActionPerformed(evt);
            }
        });

        buttonB.setBackground(new java.awt.Color(255, 0, 0));
        buttonB.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        buttonB.setText("Pokemon");
        buttonB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBActionPerformed(evt);
            }
        });

        buttonA.setBackground(new java.awt.Color(255, 0, 0));
        buttonA.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        buttonA.setText("Battle");
        buttonA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAActionPerformed(evt);
            }
        });

        buttonC.setBackground(new java.awt.Color(255, 0, 0));
        buttonC.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        buttonC.setText("Bag");
        buttonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCActionPerformed(evt);
            }
        });

        enemyInfo.setFont(new java.awt.Font("Good Times", 0, 14)); // NOI18N
        enemyInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        yourInfo.setFont(new java.awt.Font("Good Times", 0, 14)); // NOI18N
        yourInfo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        yourInfo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        backButton.setBackground(new java.awt.Color(255, 0, 0));
        backButton.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 204, 102));

        resultLabel.setEditable(false);
        resultLabel.setBackground(new java.awt.Color(255, 153, 51));
        resultLabel.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        resultLabel.setForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(resultLabel);

        javax.swing.GroupLayout battleScreenLayout = new javax.swing.GroupLayout(battleScreen);
        battleScreen.setLayout(battleScreenLayout);
        battleScreenLayout.setHorizontalGroup(
            battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(battleScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(battleScreenLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(userPokemonImage, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yourInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(battleScreenLayout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(enemyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enemyPokemonImage, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, battleScreenLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18))
        );
        battleScreenLayout.setVerticalGroup(
            battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, battleScreenLayout.createSequentialGroup()
                .addGroup(battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(battleScreenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(enemyPokemonImage, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yourInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(battleScreenLayout.createSequentialGroup()
                        .addGroup(battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enemyInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userPokemonImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(battleScreenLayout.createSequentialGroup()
                        .addGroup(battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonA, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonB, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(battleScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonD, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonC, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        pokemonScreen.setBackground(new java.awt.Color(0, 153, 153));

        selectPokemon.setBackground(new java.awt.Color(255, 0, 0));
        selectPokemon.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        selectPokemon.setText("Select Pokemon");
        selectPokemon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPokemonActionPerformed(evt);
            }
        });

        resultLabel1.setEditable(false);
        resultLabel1.setBackground(new java.awt.Color(255, 153, 51));
        resultLabel1.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        jScrollPane2.setViewportView(resultLabel1);

        pokemonSelector.add(Pokemon2);
        Pokemon2.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        Pokemon2.setText("Pokemon2");
        Pokemon2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pokemon2ActionPerformed(evt);
            }
        });

        pokemonSelector.add(Pokemon3);
        Pokemon3.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        Pokemon3.setText("Pokemon3");
        Pokemon3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pokemon3ActionPerformed(evt);
            }
        });

        pokemonSelector.add(Pokemon4);
        Pokemon4.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        Pokemon4.setText("Pokemon4");
        Pokemon4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pokemon4ActionPerformed(evt);
            }
        });

        pokemonSelector.add(Pokemon5);
        Pokemon5.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        Pokemon5.setText("Pokemon5");
        Pokemon5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pokemon5ActionPerformed(evt);
            }
        });

        pokemonSelector.add(Pokemon6);
        Pokemon6.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        Pokemon6.setText("Pokemon6");
        Pokemon6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pokemon6ActionPerformed(evt);
            }
        });

        pokemonSelector.add(Pokemon1);
        Pokemon1.setFont(new java.awt.Font("Good Times", 0, 15)); // NOI18N
        Pokemon1.setText("Pokemon1");
        Pokemon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pokemon1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pokemonScreenLayout = new javax.swing.GroupLayout(pokemonScreen);
        pokemonScreen.setLayout(pokemonScreenLayout);
        pokemonScreenLayout.setHorizontalGroup(
            pokemonScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pokemonScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pokemonScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pokemonScreenLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectPokemon, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE))
                    .addGroup(pokemonScreenLayout.createSequentialGroup()
                        .addGroup(pokemonScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Pokemon2, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                            .addComponent(Pokemon3, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                            .addComponent(Pokemon4, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                            .addComponent(Pokemon5, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                            .addComponent(Pokemon6, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                            .addComponent(Pokemon1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18))
        );
        pokemonScreenLayout.setVerticalGroup(
            pokemonScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pokemonScreenLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pokemonScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pokemonScreenLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(Pokemon1)
                        .addGap(18, 18, 18)
                        .addComponent(Pokemon2)
                        .addGap(18, 18, 18)
                        .addComponent(Pokemon3)
                        .addGap(18, 18, 18)
                        .addComponent(Pokemon4)
                        .addGap(18, 18, 18)
                        .addComponent(Pokemon5)
                        .addGap(18, 18, 18)
                        .addComponent(Pokemon6)))
                .addGap(12, 12, 12)
                .addGroup(pokemonScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectPokemon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );

        jLayeredPane2.setLayer(battleScreen, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(pokemonScreen, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1020, Short.MAX_VALUE)
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(battleScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(pokemonScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(battleScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(pokemonScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        setGUIState(0);
    }//GEN-LAST:event_backButtonActionPerformed

    private void buttonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCActionPerformed
        // TODO add your handling code here:
        switch(GUIState){
            case 0:
                setGUIState(4);
                break;
            case 1:
                startTurn(activePokemon.getMoves()[2]);
                setGUIState(0);
                break;
            case 2:
                break;
            case 3:
                break;
            default:
                
        }
    }//GEN-LAST:event_buttonCActionPerformed
    
    Pokemon selection;
    Pokemon previousPokemon = userPokemon[0];
    private void selectPokemonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPokemonActionPerformed
        if (selection.getHp()>0){
            previousPokemon = activePokemon;
            activePokemon = selection;
            changePokemon(userPokemonImage,selection);
            setGUIState(0);
            
        }else{
            resultLabel1.setText(selection.getName()+" has fainted, pick another pokemon");
        }
        
        if(previousPokemon.getHp()>0){
            Random rand = new Random();
            Move enemyMove = activeEnemyPokemon.getMoves()[rand.nextInt(3)];
            resultLabel.setText(enemyMove.attack(activeEnemyPokemon,activePokemon));
            System.out.println(enemyMove.getName());
            updateHP(enemyInfo, activeEnemyPokemon);
            updateHP(yourInfo, activePokemon);
        }
    }//GEN-LAST:event_selectPokemonActionPerformed

    private void Pokemon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pokemon1ActionPerformed
        // TODO add your handling code here:
        selection = userPokemon[0];
        try{
            ImageIcon imageIcon = new ImageIcon(ImageIO.read(userPokemon[0].getImageURL()));
            Image scaledImage = imageIcon.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            jLabel1.setIcon(scaledIcon);
        }catch(IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_Pokemon1ActionPerformed

    private void Pokemon2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pokemon2ActionPerformed
        // TODO add your handling code here:
        selection = userPokemon[1];
        try{
            ImageIcon imageIcon = new ImageIcon(ImageIO.read(userPokemon[1].getImageURL()));
            Image scaledImage = imageIcon.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            jLabel1.setIcon(scaledIcon);
        }catch(IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_Pokemon2ActionPerformed

    private void Pokemon3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pokemon3ActionPerformed
        // TODO add your handling code here:
        selection = userPokemon[2];
        try{
            ImageIcon imageIcon = new ImageIcon(ImageIO.read(userPokemon[2].getImageURL()));
            Image scaledImage = imageIcon.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            jLabel1.setIcon(scaledIcon);
        }catch(IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_Pokemon3ActionPerformed

    private void Pokemon4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pokemon4ActionPerformed
        // TODO add your handling code here:
        selection = userPokemon[3];
        try{
            ImageIcon imageIcon = new ImageIcon(ImageIO.read(userPokemon[3].getImageURL()));
            Image scaledImage = imageIcon.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            jLabel1.setIcon(scaledIcon);
        }catch(IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_Pokemon4ActionPerformed

    private void Pokemon5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pokemon5ActionPerformed
        // TODO add your handling code here:
        selection = userPokemon[4];
        try{
            ImageIcon imageIcon = new ImageIcon(ImageIO.read(userPokemon[4].getImageURL()));
            Image scaledImage = imageIcon.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            jLabel1.setIcon(scaledIcon);
        }catch(IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_Pokemon5ActionPerformed

    private void Pokemon6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pokemon6ActionPerformed
        // TODO add your handling code here:
        selection = userPokemon[5];
        try{
            ImageIcon imageIcon = new ImageIcon(ImageIO.read(userPokemon[5].getImageURL()));
            Image scaledImage = imageIcon.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            jLabel1.setIcon(scaledIcon);
        }catch(IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_Pokemon6ActionPerformed

    private void changePokemon(javax.swing.JLabel label, Pokemon pokemon){
        
        try {
                ImageIcon imageIcon = new ImageIcon(ImageIO.read(pokemon.getImageURL()));
                
                Image scaledImage = imageIcon.getImage().getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(scaledImage);

                label.setIcon(scaledIcon);
                
            } catch (IOException e) {
                e.printStackTrace();
            }
        
        if (label.equals(enemyPokemonImage)){
            activeEnemyPokemon = pokemon;
            updateHP(enemyInfo, activeEnemyPokemon);           
        }
        if (label.equals(userPokemonImage)){
            activePokemon = pokemon;
            updateHP(yourInfo,activePokemon);
        }
        
    }

    private void updateHP(javax.swing.JLabel label, Pokemon pokemon){
        label.setText(String.format("%s LVL%d (%d/%d)", pokemon.getName(),pokemon.getLevel(),pokemon.getHp(),pokemon.getMaxHP()));
    }
    
    private int GUIState = 0;
    
    private void setGUIState(int state){
        if (activePokemon.getHp() ==0 && !gameEnded){
            state =2;
        }
        GUIState = state;
        switch(state){
            case 0:
                pokemonScreen.setVisible(false);
                battleScreen.setVisible(true);
                buttonA.setText("Fight");
                buttonB.setText("Pokemon");
                buttonC.setText("Bag");
                buttonD.setText("RUN");
                break;
            case 1:
                buttonA.setText(String.format("%s (%d/%d)",activePokemon.getMoves()[0].getName(),activePokemon.getMoves()[0].getPP(),activePokemon.getMoves()[0].getMaxPP()));
                buttonB.setText(String.format("%s (%d/%d)",activePokemon.getMoves()[1].getName(),activePokemon.getMoves()[1].getPP(),activePokemon.getMoves()[1].getMaxPP()));
                buttonC.setText(String.format("%s (%d/%d)",activePokemon.getMoves()[2].getName(),activePokemon.getMoves()[2].getPP(),activePokemon.getMoves()[2].getMaxPP()));
                buttonD.setText(String.format("%s (%d/%d)",activePokemon.getMoves()[3].getName(),activePokemon.getMoves()[3].getPP(),activePokemon.getMoves()[3].getMaxPP()));
                break;
            case 2:
                battleScreen.setVisible(false);
                pokemonScreen.setVisible(true);
                break;
            case 4:
                System.out.println("closing");
                System.exit(0);
                break;
            default:
                
        }
    }
    
    private void buttonAActionPerformed(ActionEvent evt) {
        switch(GUIState){
            case 0:
                setGUIState(1);
                break;
            case 1:
                startTurn(activePokemon.getMoves()[0]);
                setGUIState(0);
                break;
            case 2:
                break;
            case 3:
                break;
            default:
                
        }
    }


    private void buttonBActionPerformed(ActionEvent evt) {
        switch(GUIState){
            case 0:
                setGUIState(2);
                break;
            case 1:
                startTurn(activePokemon.getMoves()[1]);
                setGUIState(0);
                break;
            case 2:
                break;
            case 4:
                break;
            default:
                
        }
    }
    


    private void buttonDActionPerformed(ActionEvent evt) {
        switch(GUIState){
            case 0:
                setGUIState(4);
                break;
            case 1:
                startTurn(activePokemon.getMoves()[3]);
                setGUIState(0);
                break;
            case 2:
                break;
            case 3:
                break;
            default:
                
        }
    }
    
    private boolean gameEnded = false;
    
    private void startTurn(Move move){
        if(!gameEnded && move.getPP()>0){
            Random rand = new Random();
            Move enemyMove = activeEnemyPokemon.getMoves()[rand.nextInt(4)];
            Pokemon first;
            Move firstMove;
            Pokemon second;
            Move secondMove;
            if(enemyMove.getPriority()&&move.getPriority()){
                if(activeEnemyPokemon.getSpeed()<=activePokemon.getSpeed()){
                    first = activePokemon;
                    second = activeEnemyPokemon;
                }else{
                    first = activeEnemyPokemon;
                    second = activePokemon;
                }
            }else if(move.getPriority()){
                first = activePokemon;
                second = activeEnemyPokemon;
            }else if(enemyMove.getPriority()){
                first = activeEnemyPokemon;
                second = activePokemon;
            }else{
                if(activeEnemyPokemon.getSpeed()<=activePokemon.getSpeed()){
                    first = activePokemon;
                    second = activeEnemyPokemon;
                }else{
                    first = activeEnemyPokemon;
                    second = activePokemon;
                }
            }
            if(first.equals(activePokemon)){
                resultLabel.setText(resultLabel.getText()+"\n"+move.attack(first, second)+"\n"+enemyMove.attack(second, first));
                if(second.getHp()>0){
                    resultLabel1.setText(resultLabel.getText()+"\n"+move.attack(first, second)+"\n"+enemyMove.attack(second, first));
                }
            }else if(first.equals(activeEnemyPokemon)){
                resultLabel.setText(resultLabel.getText()+"\n"+enemyMove.attack(first, second)+"\n"+move.attack(second, first));
                if(second.getHp()>0){
                    resultLabel1.setText(resultLabel.getText()+"\n"+enemyMove.attack(first, second)+"\n"+move.attack(second, first));
                }
            }else{
                System.out.println("Error");
            }
            updateHP(enemyInfo, activeEnemyPokemon);
            updateHP(yourInfo, activePokemon);
            move.setPP(move.getPP()-1);
            try{
                if(activeEnemyPokemon.getHp() == 0){
                    resultLabel.setText(resultLabel.getText()+"\n"+activeEnemyPokemon.getName()+" has fainted.");
                    ePKMNNum+=1;
                    changePokemon(enemyPokemonImage,enemyPokemon[ePKMNNum]);
                }
                if(activePokemon.getHp() == 0){
                    resultLabel.setText(resultLabel.getText()+"\n"+activePokemon.getName()+" has fainted.");
                    uPKMNNum+=1;
                    //buttonBActionPerformed();
                    System.out.println("Fainted");
                }  
            }catch(java.lang.ArrayIndexOutOfBoundsException ArrayIndexOutOfBoundsException){
                if(uPKMNNum>ePKMNNum){
                    resultLabel.setText(resultLabel.getText()+"\n All your pokemon have fainted, YOU LOSE");
                }else{
                    resultLabel.setText(resultLabel.getText()+"\n Your Opponent is out of Pokemon YOU WIN!");
                }
                gameEnded = true;
            }
            resultLabel.setText(resultLabel.getText()+"\n\n");
        }else if(gameEnded){
            resultLabel.setText("All of your opponents Pokemon have fainted\n\n YOU WON!!!");
        }else{
            System.out.println("Can't attack");
        }
    }

    public static Pokemon Venusaur;
    public static Pokemon Charizard;
    public static Pokemon Blastoise;
    public static Pokemon Butterfree;
    public static Pokemon Pidgeot;
    public static Pokemon Pikachu;
    public static Pokemon Nidoking;
    public static Pokemon Nidoqueen;
    public static Pokemon Wigglytuff;
    public static Pokemon Primeape;
    public static Pokemon Gengar;
    public static Pokemon Mewtwo;
    public static Pokemon Dragonite;
    public static Pokemon Articuno;
    public static Pokemon Zapdos;
    public static Pokemon Moltres;
    public static Pokemon Golem;
    public static Pokemon Magneton;
    
    public static PKMNType Normal = new PKMNType("Normal");
    public static PKMNType Fire = new PKMNType("Fire");
    public static PKMNType Water = new PKMNType("Water");
    public static PKMNType Grass = new PKMNType("Grass");
    public static PKMNType Flying = new PKMNType("Flying");
    public static PKMNType Fighting = new PKMNType("Fighting");
    public static PKMNType Poison = new PKMNType("Poison");
    public static PKMNType Electric = new PKMNType("Electric");
    public static PKMNType Ground = new PKMNType("Ground");
    public static PKMNType Rock = new PKMNType("Rock");
    public static PKMNType Psychic = new PKMNType("Psychic");
    public static PKMNType Ice = new PKMNType("Ice");
    public static PKMNType Bug = new PKMNType("Bug");
    public static PKMNType Ghost = new PKMNType("Ghost");
    public static PKMNType Steel = new PKMNType("Steel");
    public static PKMNType Dragon = new PKMNType("Dragon");
    public static PKMNType Dark = new PKMNType("Dark");
    public static PKMNType Fairy = new PKMNType("Fairy");
    public static PKMNType None = new PKMNType();
    
    public enum Status{
        NORMAL,
        PARALYSIS,
        SLEEP,
        POISON,
        BURN,
        FREEZE,
        CONFUSION
    }
    
    public static Move  quick_attack = new Move("Quick Attack", 100, 40, 30, Normal, "Physical", 0, 0, true);
    public static Move blizzard = new Move("Blizzard", 70, 110, 5, Ice, "Special", 0, 0, false, Status.FREEZE, 0.1);
    public static Move body_slam = new Move("Body Slam", 100, 85, 15, Normal, "Physical", 0, 0, false, Status.PARALYSIS, 0.3);
    public static Move double_edge = new Move("Double-Edge", 100, 120, 15, Normal, "Physical", 0.3, 0, false);
    public static Move dragon_claw = new Move("Dragon Claw", 100, 80, 15, Dragon, "Special", 0, 0, false);
    public static Move drill_peck = new Move("Drill Peck", 100, 80, 20, Flying, "Physical", 0, 0, false);
    public static Move dynamic_punch = new Move("Dynamic Punch ", 50, 100, 5, Fighting, "Physical", 0, 0, false, Status.CONFUSION, 1);
    public static Move earthquake = new Move("Earthquake", 100, 100, 10, Ground, "Physical", 0, 0, false);
    public static Move explosion = new Move("Explosion", 100, 250, 5, Normal, "Physical", 1, 0, false);
    public static Move fire_blast = new Move("Fire Blast", 85, 120, 5, Fire, "Special", 0, 0, false, Status.BURN, 0.3);
    public static Move flamethrower = new Move("Flamethrower", 100, 95, 15, Fire, "Special", 0, 0, false, Status.BURN, 0.1);
    public static Move hurricane = new Move("Hurricane", 70, 110, 10, Flying, "Special", 0, 0, false, Status.CONFUSION, 0.3);
    public static Move hyper_beam = new Move("Hyper Beam", 90, 150, 5, Normal, "Special", 0, 0, false);
    public static Move hypnosis = new Move("Hypnosis", 100, 0, 20, Psychic, "Status", 0, 0, false, Status.SLEEP, 1);
    public static Move ice_beam = new Move("Ice Beam", 100, 90, 10, Ice, "Special", 0, 0, false, Status.FREEZE, 0.1);
    public static Move mega_drain = new Move("Mega Drain", 100, 40, 10, Grass, "Special", -0.5, 0, false);
    public static Move psychic = new Move("Psychic", 100, 90, 10, Psychic, "Special", 0, 0, false);
    public static Move recover = new Move("Recover", 100, 0, 20, Normal, "Status", 0, 0.5, false);
    public static Move rest = new Move("Rest", 100, 0, 10, Psychic, "Status", 0, 1, false, Status.SLEEP, 1);
    public static Move rock_slide = new Move("Rock Slide", 90, 75, 10, Rock, "Physical", 0, 0, false);
    public static Move razor_leaf = new Move("Razor_Leaf", 95, 55, 25, Grass, "Physical", 0, 0, false);
    public static Move sleep_powder = new Move("Sleep Powder", 100, 0, 15, Grass , "Status", 0, 0, false, Status.SLEEP, 1);
    public static Move stun_spore = new Move("Stun Spore", 75, 0, 30, Grass, "Status ", 0, 0, false, Status.PARALYSIS, 1);
    public static Move submission = new Move("Submission", 80, 80, 25, Fighting, "Physical", 0.25, 0, false);
    public static Move surf = new Move("Surf", 100, 95, 15, Water, "Special", 0, 0, false);
    public static Move swift = new Move("Swift", 1000, 60, 20, Normal, "Physical", 0, 0, false);
    public static Move take_down = new Move("Take Down", 85, 90, 20, Normal, "Physical", 0.25, 0, false);
    public static Move thunder_wave = new Move("Thunder Wave", 100, 0, 20, Electric, "Status", 0, 0, false, Status.PARALYSIS, 1);
    public static Move thunderbolt = new Move("Thunderbolt", 100, 95, 15, Electric, "Special", 0, 0, false, Status.PARALYSIS, 0.1);
    public static Move toxic = new Move("Toxic", 85, 0, 10, Poison, "Status", 0, 0, false, Status.POISON, 1);
    public static Move wing_attack = new Move("Wing Attack", 100, 35, 35, Flying, "Physical", 0, 0, false);
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws MalformedURLException {
        Normal.setWeakness(new PKMNType[]{Fighting});
        Normal.setTypeAdvantage(new PKMNType[]{None});
        Fire.setWeakness(new PKMNType[]{Water,Ground, Rock});
        Fire.setTypeAdvantage(new PKMNType[]{Grass,Ice,Bug,Steel});
        Water.setWeakness(new PKMNType[]{Grass, Electric});
        Water.setTypeAdvantage(new PKMNType[]{Fire,Ground,Rock});
        Grass.setWeakness(new PKMNType[]{Fire,Ice,Poison,Flying,Bug});
        Grass.setTypeAdvantage(new PKMNType[]{Water,Ground,Rock});
        Electric.setWeakness(new PKMNType[]{Ground});
        Electric.setTypeAdvantage(new PKMNType[]{Water,Flying});
        Ice.setWeakness(new PKMNType[]{Fire,Fighting,Rock,Steel});
        Ice.setTypeAdvantage(new PKMNType[]{Grass,Ground,Flying,Dragon});
        Fighting.setWeakness(new PKMNType[]{Psychic,Flying,Fairy});
        Fighting.setTypeAdvantage(new PKMNType[]{Normal,Ice,Rock,Dark,Steel});
        Poison.setWeakness(new PKMNType[]{Ground, Psychic});
        Poison.setTypeAdvantage(new PKMNType[]{Grass,Fairy});
        Ground.setWeakness(new PKMNType[]{Water,Grass,Ice});
        Ground.setTypeAdvantage(new PKMNType[]{Fire,Electric,Poison,Rock,Steel});
        Flying.setWeakness(new PKMNType[]{Electric,Rock,Ice});
        Flying.setTypeAdvantage(new PKMNType[]{Grass,Fighting,Bug});
        Psychic.setWeakness(new PKMNType[]{Bug,Ghost,Dark});
        Psychic.setTypeAdvantage(new PKMNType[]{Fighting,Poison});
        Bug.setWeakness(new PKMNType[]{Flying,Rock,Fire});
        Bug.setTypeAdvantage(new PKMNType[]{Grass,Psychic,Dark});
        Rock.setWeakness(new PKMNType[]{Water,Grass,Fighting,Ground,Steel});
        Rock.setTypeAdvantage(new PKMNType[]{Fire,Ice,Flying,Bug});
        Ghost.setWeakness(new PKMNType[]{Ghost,Dark});
        Ghost.setTypeAdvantage(new PKMNType[]{Psychic, Ghost});
        Dragon.setWeakness(new PKMNType[]{Ice,Dragon,Fairy});
        Dragon.setTypeAdvantage(new PKMNType[]{Dragon});
        Dark.setWeakness(new PKMNType[]{Fighting,Bug,Fairy});
        Dark.setTypeAdvantage(new PKMNType[]{Psychic,Ghost});
        Steel.setWeakness(new PKMNType[]{Fire,Fighting,Ground});
        Steel.setTypeAdvantage(new PKMNType[]{Ice,Rock,Fairy});
        Fairy.setWeakness(new PKMNType[]{Poison,Steel});
        Fairy.setTypeAdvantage(new PKMNType[]{Fighting,Dragon,Dark});
        
        Venusaur = new Pokemon("Venusaur", 100, new int[]{15, 15, 15, 15, 15}, 80, 82, 83, 100, 100, 80, new PKMNType[]{Grass, Poison}, new Move[]{new Move(razor_leaf), new Move(mega_drain), new Move(hyper_beam), new Move(toxic) },"https://www.smogon.com/dex/media/sprites/rs/venusaur.png");
        Charizard = new Pokemon("Charizard", 100, new int[]{15, 15, 15, 15, 15}, 78, 84, 78, 109, 85, 100, new PKMNType[]{Fire, Flying}, new Move[]{new Move(flamethrower), new Move(earthquake), new Move(wing_attack), new Move(dragon_claw) },"https://www.smogon.com/dex/media/sprites/rs/charizard.png");
        Blastoise = new Pokemon("Blastoise", 100, new int[]{15, 15, 15, 15, 15}, 79, 83, 100, 85, 105, 78, new PKMNType[]{Water}, new Move[]{new Move(surf), new Move(blizzard), new Move(body_slam), new Move(earthquake) },"https://www.smogon.com/dex/media/sprites/rs/blastoise.png");
        Butterfree = new Pokemon("Butterfree", 100, new int[]{15, 15, 15, 15, 15}, 60, 45, 50, 90, 80, 70, new PKMNType[]{Bug, Flying}, new Move[]{new Move(sleep_powder), new Move(stun_spore), new Move(psychic), new Move(mega_drain) },"https://www.smogon.com/dex/media/sprites/rs/butterfree.png");
        Pidgeot = new Pokemon("Pidgeot", 100, new int[]{15, 15, 15, 15, 15}, 83, 80, 75, 70, 70, 101, new PKMNType[]{Normal, Flying}, new Move[]{new Move(double_edge), new Move(hyper_beam), new Move(hurricane), new Move(rest) },"https://www.smogon.com/dex/media/sprites/rs/pidgeot.png");
        Pikachu = new Pokemon("Pikachu", 100, new int[]{15, 15, 15, 15, 15}, 35, 55, 40, 50, 50, 90, new PKMNType[]{Electric}, new Move[]{new Move(thunderbolt), new Move(swift), new Move( quick_attack), new Move(thunder_wave) },"https://www.smogon.com/dex/media/sprites/rs/pikachu.png");
        Nidoking = new Pokemon("Nidoking", 100, new int[]{15, 15, 15, 15, 15}, 81, 102, 77, 85, 75, 85, new PKMNType[]{Poison, Ground}, new Move[]{new Move(earthquake), new Move(thunderbolt), new Move(blizzard), new Move(rock_slide) },"https://www.smogon.com/dex/media/sprites/rs/nidoking.png");
        Nidoqueen = new Pokemon("Nidoqueen", 100, new int[]{15, 15, 15, 15, 15}, 90, 92, 87, 75, 85, 76, new PKMNType[]{Poison, Ground}, new Move[]{new Move(earthquake), new Move(thunderbolt), new Move(blizzard), new Move(fire_blast) },"https://www.smogon.com/dex/media/sprites/rs/nidoqueen.png");
        Wigglytuff = new Pokemon("Wigglytuff", 100, new int[]{15, 15, 15, 15, 15}, 140, 70, 45, 85, 50, 45, new PKMNType[]{Normal, Fairy}, new Move[]{new Move(thunder_wave), new Move(hyper_beam), new Move(blizzard), new Move(thunderbolt) },"https://www.smogon.com/dex/media/sprites/rs/wigglytuff.png");
        Primeape = new Pokemon("Primeape", 100, new int[]{15, 15, 15, 15, 15}, 65, 105, 60, 60, 70, 95, new PKMNType[]{Fighting}, new Move[]{new Move(submission), new Move(body_slam), new Move(hyper_beam), new Move(rock_slide) },"https://www.smogon.com/dex/media/sprites/rs/primeape.png");
        Gengar = new Pokemon("Gengar", 100, new int[]{15, 15, 15, 15, 15}, 60, 65, 60, 130, 75, 110, new PKMNType[]{Ghost, Poison}, new Move[]{new Move(hypnosis), new Move(mega_drain), new Move(thunderbolt), new Move(explosion) },"https://www.smogon.com/dex/media/sprites/rs/gengar.png");
        Mewtwo = new Pokemon("Mewtwo", 100, new int[]{15, 15, 15, 15, 15}, 106, 110, 90, 154, 90, 130, new PKMNType[]{Psychic}, new Move[]{new Move(dynamic_punch), new Move(psychic), new Move(ice_beam), new Move(recover) },"https://www.smogon.com/dex/media/sprites/rs/mewtwo.png");
        Dragonite = new Pokemon("Dragonite", 100, new int[]{15, 15, 15, 15, 15}, 91, 134, 95, 100, 100, 80, new PKMNType[]{Dragon, Flying}, new Move[]{new Move(thunder_wave), new Move(blizzard), new Move(body_slam), new Move(hyper_beam) },"https://www.smogon.com/dex/media/sprites/rs/dragonite.png");
        Articuno = new Pokemon("Articuno", 100, new int[]{15, 15, 15, 15, 15}, 90, 85, 100, 95, 125, 85, new PKMNType[]{Ice, Flying}, new Move[]{new Move(blizzard), new Move(double_edge), new Move(hyper_beam), new Move(ice_beam) },"https://www.smogon.com/dex/media/sprites/rs/articuno.png");
        Zapdos = new Pokemon("Zapdos", 100, new int[]{15, 15, 15, 15, 15}, 90, 90, 85, 125, 90, 100, new PKMNType[]{Electric, Flying}, new Move[]{new Move(thunderbolt), new Move(thunder_wave), new Move(drill_peck), new Move(rest) },"https://www.smogon.com/dex/media/sprites/rs/zapdos.png");
        Moltres = new Pokemon("Moltres", 100, new int[]{15, 15, 15, 15, 15}, 90, 100, 90, 125, 85, 90, new PKMNType[]{Fire, Flying}, new Move[]{new Move(fire_blast), new Move(take_down), new Move(toxic), new Move(rest) },"https://www.smogon.com/dex/media/sprites/rs/moltres.png");
        Golem = new Pokemon("Golem", 100, new int[]{15, 15, 15, 15, 15}, 80, 120, 130, 55, 65, 45, new PKMNType[]{Rock, Ground}, new Move[]{new Move(earthquake), new Move(rock_slide), new Move(explosion), new Move(body_slam) },"https://www.smogon.com/dex/media/sprites/rs/golem.png");
        Magneton = new Pokemon("Magneton", 100, new int[]{15, 15, 15, 15, 15}, 50, 60, 95, 120, 70, 70, new PKMNType[]{Electric, Steel}, new Move[]{new Move(thunderbolt), new Move(hyper_beam), new Move(thunder_wave), new Move(rest) },"https://www.smogon.com/dex/media/sprites/rs/magneton.png");
        Pokemon[] allPokemon = new Pokemon[]{Venusaur, Charizard,Blastoise,Butterfree,Pidgeot,Pikachu, Nidoking,Nidoqueen,Wigglytuff,Primeape,Gengar,Mewtwo,Dragonite,Articuno,Zapdos,Moltres,Golem,Magneton};
        Random rand = new Random();
//userPokemon = {Mewtwo};
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BattleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BattleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BattleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BattleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        userPokemon = new Pokemon[]{new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)])};
        enemyPokemon = new Pokemon[]{new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)]),new Pokemon(allPokemon[rand.nextInt(allPokemon.length-1)])};
        /* Create and display the form */
        System.out.println("hello world");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BattleGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Pokemon1;
    private javax.swing.JRadioButton Pokemon2;
    private javax.swing.JRadioButton Pokemon3;
    private javax.swing.JRadioButton Pokemon4;
    private javax.swing.JRadioButton Pokemon5;
    private javax.swing.JRadioButton Pokemon6;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel battleScreen;
    private javax.swing.JButton buttonA;
    private javax.swing.JButton buttonB;
    private javax.swing.JButton buttonC;
    private javax.swing.JButton buttonD;
    private javax.swing.JLabel enemyInfo;
    private javax.swing.JLabel enemyPokemonImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pokemonScreen;
    private javax.swing.ButtonGroup pokemonSelector;
    private javax.swing.JTextPane resultLabel;
    private javax.swing.JTextPane resultLabel1;
    private javax.swing.JButton selectPokemon;
    private javax.swing.JLabel userPokemonImage;
    private javax.swing.JLabel yourInfo;
    // End of variables declaration//GEN-END:variables
}
